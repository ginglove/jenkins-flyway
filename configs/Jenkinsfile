def config

pipeline {
   agent any
   parameters{
        choice(
          name: 'MIGRATE_VAR',
          choices: ['migrate', 'baseline', 'info'],
          description: 'Chon Migrate Function'
        )
        choice(
          name: 'DATABASE_VAR',
          choices: ['flyway_migrate','cdcn_customer_service_v2','test'],
          description: 'Chon Database variable'
        )
   }
   stages {
        stage('PULL RESOURCE FROM BITBUCKET') {
            steps {
                script{
                    config = readYaml file: 'configs/config.yaml'         
                    sh (script: '''
                    rm -rf /u01/data/jenkins/tools/flyway/sql;
                    mkdir  /u01/data/jenkins/tools/flyway/sql;
                    cp -r /u01/data/jenkins/workspace/${env.JOB_NAME}/sql/Normal/* /u01/data/jenkins/tools/flyway/sql/;
                    ls -al /u01/data/jenkins/tools/flyway/sql ;
                    ''');
                }
            }
        }
        stage('FLYWAY MIGRATE PROCESS') {
             steps {
                echo "======> Start Flyway Migration Process <======";
                echo config.db_remote_db_cred.toString()
                echo "${env.JOB_NAME}";
                echo "${MIGRATE_VAR}";
                echo "${DATABASE_VAR}";
                // script{
                //     sh (script: '''
                //     rm -rf /u01/data/jenkins/tools/flyway/sql;
                //     mkdir  /u01/data/jenkins/tools/flyway/sql;
                //     cp -r ${env.WORKSPACE}/sql/Success/* /u01/data/jenkins/tools/flyway/sql/;
                //     ''');
                // }
                flywayrunner commandLineArgs: '', credentialsId: 'config.db_remote_db_cred' , flywayCommand: '${MIGRATE_VAR}', installationName: 'flyway-test', locations: '', url: 'config.db_remote_config/${DATABASE_VAR}'
            }
        }
    }
    post { 
        failure { 
            script{
                stage('ROLLBACK PROCESS'){
                        echo "======> Start DELETE Version for ROLLBACK  <======";
                        docker.withRegistry("http://nexus.digital.vn", 'nexus_docker') {
                            sh "docker pull mysql"
                        }
                        withCredentials([usernamePassword(credentialsId: 'config.db_remote_db_cred', passwordVariable: 'DB_PASSWORD', usernameVariable: 'DB_USERNAME')]) {
                                sh label: '', script: 'docker run mysql bash -c "mysql -h db_remote_config_host -P db_remote_config_port --protocol=tcp -u$DB_USERNAME -p$DB_PASSWORD -e \\\" DELETE from $DATABASE_VAR.flyway_schema_history where script in (select * from ( select script from $DATABASE_VAR.flyway_schema_history order by installed_rank desc limit 1) as tmp);\\\""'
                        }
                       echo "======> Start Copy ROLLBACK Folder PROGRESS <======";
                       script{
                        sh (script: '''
                        rm -rf /u01/data/jenkins/tools/flyway/sql;
                        mkdir  /u01/data/jenkins/tools/flyway/sql;
                        cp -r /u01/data/jenkins/workspace/${env.JOB_NAME}/sql/Rollback/* /u01/data/jenkins/tools/flyway/sql/;
                        ''');
                        }
                        echo "======> Start FLYWAY ROLLBACK <======"
                        flywayrunner commandLineArgs: '', credentialsId: 'config.db_remote_db_cred', flywayCommand: '${MIGRATE_VAR}', installationName: 'flyway-test', locations: '', url: 'config.db_remote_config/${DATABASE_VAR}'
                        sh 'sleep 10'
                        echo "======> Start DELETE VERSION ROLLBACK IN DB <======";
                        withCredentials([usernamePassword(credentialsId: 'config.db_remote_db_cred', passwordVariable: 'DB_PASSWORD', usernameVariable: 'DB_USERNAME')]) {
                                sh label: '', script: 'docker run mysql bash -c "mysql -h db_remote_config_host -P db_remote_config_port --protocol=tcp -u$DB_USERNAME -p$DB_PASSWORD -e \\\" DELETE from $DATABASE_VAR.flyway_schema_history where script in (select * from ( select script from $DATABASE_VAR.flyway_schema_history order by installed_rank desc limit 1) as tmp);\\\""'
                        }                                                
                }
            }
        }
    }    
}
